/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.netbeans.cubeon.ui;

import java.awt.Image;
import java.io.Serializable;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.Action;
import org.netbeans.cubeon.api.TaskContext;
import org.netbeans.cubeon.api.TaskRepositoryHandler;
import org.netbeans.cubeon.spi.TaskRepository;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
final class TaskRepositoriesTopComponent extends TopComponent implements ExplorerManager.Provider {

    private static TaskRepositoriesTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "org/netbeans/cubeon/ui/repositories.png";
    private static final String PREFERRED_ID = "TaskRepositoriesTopComponent";
    //node tree view
    private final BeanTreeView treeView = new BeanTreeView();
    private final transient ExplorerManager explorerManager = new ExplorerManager();
    
    
    private TaskRepositoriesTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(TaskRepositoriesTopComponent.class, "CTL_TaskRepositoriesTopComponent"));
        setToolTipText(NbBundle.getMessage(TaskRepositoriesTopComponent.class, "HINT_TaskRepositoriesTopComponent"));
        setIcon(Utilities.loadImage(ICON_PATH, true));
        //hide root node
        treeView.setRootVisible(false);

        refresh();
    }
    
    /**
     * 
     * load registered Task repositories
     * 
     */
    private void refresh() {
        Children.Array array = new Children.Array();
        explorerManager.setRootContext(
                new AbstractNode(array) {
                    @Override
                    public Action[] getActions(boolean arg0) {
                        return new Action[]{};
                    }
                });

        //lookup TaskContext
        TaskContext taskContext = Lookup.getDefault().lookup(TaskContext.class);
        assert taskContext!=null :"TaskContext can't be null";

        //lookup TaskRepositoryHandler
        TaskRepositoryHandler repositoryHandler = taskContext.getLookup().lookup(TaskRepositoryHandler.class); 
        assert repositoryHandler!=null :"TaskRepositoryHandler can't be null";

        List<TaskRepository> repositorys = repositoryHandler.getTaskRepositorys();
        for (TaskRepository tr : repositorys) {
            //get task repository lookup and find node from it
            Node repositoryNode = tr.getLookup().lookup(Node.class);
            //repository node can not be null
            assert repositoryNode!=null;
            array.add(new Node[]{repositoryNode});
        }
        
        //if no repositories found show empty       
        if (repositorys.isEmpty()) {
            array.add(new Node[]{EMPTY_REPOSITORIES});
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JScrollPane jScrollPane1 = treeView;

        setLayout(new java.awt.BorderLayout());
        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized TaskRepositoriesTopComponent getDefault() {
        if (instance == null) {
            instance = new TaskRepositoriesTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the TaskRepositorysTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized TaskRepositoriesTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(TaskRepositoriesTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof TaskRepositoriesTopComponent) {
            return (TaskRepositoriesTopComponent) win;
        }
        Logger.getLogger(TaskRepositoriesTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }


    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return TaskRepositoriesTopComponent.getDefault();
        }
    }

    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }
    
    /**
     * "< Empty >"
     * this Node will show if no TaskRepositories found
     */
    private static final Node EMPTY_REPOSITORIES = new AbstractNode ( Children.LEAF ){

        @Override
        public Image getIcon(int arg0) {
            return Utilities.loadImage("org/netbeans/cubeon/ui/repository.png", true);
        }

        @Override
        public String getDisplayName() {
            return NbBundle.getMessage(TaskRepositoriesTopComponent.class, "LBL_Empty_Repositories");
        }

        @Override
        public String getShortDescription() {
            return super.getShortDescription();
        //TODO add better description 
        }
        
        /**Override to remove actions */
        @Override
        public Action[] getActions(boolean arg0) {
            return new Action[]{};
        }
    };
}
